{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\Food Order App\\\\01-starting-project\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_CART_ITEM\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); // returns index of item if it exists\n\n    const exisitingCartItem = state.items[existingCartItemIndex]; // if doesn't exist, null\n\n    let updatedItems;\n\n    if (exisitingCartItem) {\n      const updatedItem = { ...exisitingCartItem,\n        amount: exisitingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItem[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item); //unlike push, concat adds it to a new array, so does not add it to old 'state' snapshot\n    }\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [carState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD_CART_ITEM\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE_CART_ITEM\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: carState.items,\n    totalAmount: carState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"cMdHBntuMobkpRa8kturDjJ1Fak=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/React/Food Order App/01-starting-project/src/store/CartProvider.js"],"names":["useReducer","CartContext","cartReducer","state","action","type","existingCartItemIndex","items","findIndex","item","id","exisitingCartItem","updatedItems","updatedItem","amount","concat","updatedTotalAmount","totalAmount","price","defaultCartState","CartProvider","props","carState","dispatchCartAction","addItemCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,qBAAqB,GAAGH,KAAK,CAACI,KAAN,CAAYC,SAAZ,CAC3BC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACK,IAAP,CAAYC,EADN,CAA9B,CADmC,CAGhC;;AAEH,UAAMC,iBAAiB,GAAGR,KAAK,CAACI,KAAN,CAAYD,qBAAZ,CAA1B,CALmC,CAK0B;;AAG7D,QAAIM,YAAJ;;AAEA,QAAID,iBAAJ,EAAuB;AACnB,YAAME,WAAW,GAAG,EAChB,GAAGF,iBADa;AAEhBG,QAAAA,MAAM,EAAEH,iBAAiB,CAACG,MAAlB,GAA0BV,MAAM,CAACK,IAAP,CAAYK;AAF9B,OAApB;AAIAF,MAAAA,YAAY,GAAG,CAAC,GAAGT,KAAK,CAACI,KAAV,CAAf;AACAM,MAAAA,WAAW,CAACP,qBAAD,CAAX,GAAqCO,WAArC;AACH,KAPD,MAOO;AACHD,MAAAA,YAAY,GAAGT,KAAK,CAACI,KAAN,CAAYQ,MAAZ,CAAmBX,MAAM,CAACK,IAA1B,CAAf,CADG,CAEP;AACC;;AAED,UAAMO,kBAAkB,GACtBb,KAAK,CAACc,WAAN,GAAoBb,MAAM,CAACK,IAAP,CAAYS,KAAZ,GAAoBd,MAAM,CAACK,IAAP,CAAYK,MADtD;AAEA,WAAO;AACLP,MAAAA,KAAK,EAAEK,YADF;AAELK,MAAAA,WAAW,EAAED;AAFR,KAAP;AAID;;AAED,SAAOG,gBAAP;AACD,CAhCD;;AAkCA,MAAMA,gBAAgB,GAAG;AACvBZ,EAAAA,KAAK,EAAE,EADgB;AAEvBU,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMG,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,QAAD,EAAWC,kBAAX,IAAiCvB,UAAU,CAC/CE,WAD+C,EAE/CiB,gBAF+C,CAAjD;;AAKA,QAAMK,kBAAkB,GAAIf,IAAD,IAAU;AACnCc,IAAAA,kBAAkB,CAAC;AACjBlB,MAAAA,IAAI,EAAE,eADW;AAEjBI,MAAAA,IAAI,EAAEA;AAFW,KAAD,CAAlB;AAID,GALD;;AAOA,QAAMgB,yBAAyB,GAAIf,EAAD,IAAQ;AACxCa,IAAAA,kBAAkB,CAAC;AACjBlB,MAAAA,IAAI,EAAE,kBADW;AAEjBK,MAAAA,EAAE,EAAEA;AAFa,KAAD,CAAlB;AAID,GALD;;AAOA,QAAMgB,WAAW,GAAG;AAClBnB,IAAAA,KAAK,EAAEe,QAAQ,CAACf,KADE;AAElBU,IAAAA,WAAW,EAAEK,QAAQ,CAACL,WAFJ;AAGlBU,IAAAA,OAAO,EAAEH,kBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/BD;;GAAMT,Y;;KAAAA,Y;AAiCN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD_CART_ITEM\") {\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    ); // returns index of item if it exists\r\n\r\n    const exisitingCartItem = state.items[existingCartItemIndex] // if doesn't exist, null\r\n\r\n    \r\n    let updatedItems;\r\n\r\n    if (exisitingCartItem) {\r\n        const updatedItem = {\r\n            ...exisitingCartItem,\r\n            amount: exisitingCartItem.amount +action.item.amount\r\n        }\r\n        updatedItems = [...state.items];\r\n        updatedItem[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n        updatedItems = state.items.concat(action.item);\r\n    //unlike push, concat adds it to a new array, so does not add it to old 'state' snapshot\r\n    }\r\n\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [carState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemCartHandler = (item) => {\r\n    dispatchCartAction({\r\n      type: \"ADD_CART_ITEM\",\r\n      item: item,\r\n    });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({\r\n      type: \"REMOVE_CART_ITEM\",\r\n      id: id,\r\n    });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: carState.items,\r\n    totalAmount: carState.totalAmount,\r\n    addItem: addItemCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}