{"ast":null,"code":"import _slicedToArray from\"D:\\\\React\\\\Food Order App\\\\food-order-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _toConsumableArray from\"D:\\\\React\\\\Food Order App\\\\food-order-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";import _objectSpread from\"D:\\\\React\\\\Food Order App\\\\food-order-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import{useReducer}from\"react\";import CartContext from\"./cart-context\";import{jsx as _jsx}from\"react/jsx-runtime\";var cartReducer=function cartReducer(state,action){if(action.type===\"ADD_CART_ITEM\"){var existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});// returns index of item if it exists\nvar exisitingCartItem=state.items[existingCartItemIndex];// if doesn't exist, null\nvar updatedItems;if(exisitingCartItem){var updatedItem=_objectSpread(_objectSpread({},exisitingCartItem),{},{amount:exisitingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);updatedItems[existingCartItemIndex]=updatedItem;}else{updatedItems=state.items.concat(action.item);//unlike push, concat adds it to a new array, so does not add it to old 'state' snapshot\n}var updatedTotalAmount=state.totalAmount+action.item.price*action.item.amount;return{items:updatedItems,totalAmount:updatedTotalAmount};}if(action.type===\"REMOVE_CART_ITEM\"){var _updatedItems;var _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.id;});var existingItem=state.items[_existingCartItemIndex];var _updatedTotalAmount=state.totalAmount-existingItem.price;if(existingItem.amount===1){_updatedItems=state.items.filter(function(item){return item.id!==action.id;});//filter returns a new array. if true added to array\n}else{var _updatedItem=_objectSpread(_objectSpread({},existingItem),{},{amount:existingItem.amount-1});_updatedItems=_toConsumableArray(state.items);_updatedItems[_existingCartItemIndex]=_updatedItem;}return{items:_updatedItems,totalAmount:_updatedTotalAmount};}return defaultCartState;};var defaultCartState={items:[],totalAmount:0};var CartProvider=function CartProvider(props){var _useReducer=useReducer(cartReducer,defaultCartState),_useReducer2=_slicedToArray(_useReducer,2),carState=_useReducer2[0],dispatchCartAction=_useReducer2[1];var addItemCartHandler=function addItemCartHandler(item){dispatchCartAction({type:\"ADD_CART_ITEM\",item:item});};var removeItemFromCartHandler=function removeItemFromCartHandler(id){dispatchCartAction({type:\"REMOVE_CART_ITEM\",id:id});};var cartContext={items:carState.items,totalAmount:carState.totalAmount,addItem:addItemCartHandler,removeItem:removeItemFromCartHandler};return/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartProvider;","map":{"version":3,"sources":["D:/React/Food Order App/food-order-app/src/store/CartProvider.js"],"names":["useReducer","CartContext","cartReducer","state","action","type","existingCartItemIndex","items","findIndex","item","id","exisitingCartItem","updatedItems","updatedItem","amount","concat","updatedTotalAmount","totalAmount","price","existingItem","filter","defaultCartState","CartProvider","props","carState","dispatchCartAction","addItemCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD_CART_ITEM\") {\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    ); // returns index of item if it exists\r\n\r\n    const exisitingCartItem = state.items[existingCartItemIndex]; // if doesn't exist, null\r\n\r\n    let updatedItems;\r\n\r\n    if (exisitingCartItem) {\r\n      const updatedItem = {\r\n        ...exisitingCartItem,\r\n        amount: exisitingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n      //unlike push, concat adds it to a new array, so does not add it to old 'state' snapshot\r\n    }\r\n\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"REMOVE_CART_ITEM\") {\r\n    let updatedItems;\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    const existingItem = state.items[existingCartItemIndex];\r\n\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n    if (existingItem.amount === 1) {\r\n        updatedItems = state.items.filter(item =>item.id !== action.id);  //filter returns a new array. if true added to array\r\n    } else {\r\n        const updatedItem = {...existingItem, amount: existingItem.amount - 1}\r\n        updatedItems = [...state.items]\r\n        updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n    return {\r\n        items: updatedItems,\r\n        totalAmount: updatedTotalAmount\r\n    }\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [carState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemCartHandler = (item) => {\r\n    dispatchCartAction({\r\n      type: \"ADD_CART_ITEM\",\r\n      item: item,\r\n    });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({\r\n      type: \"REMOVE_CART_ITEM\",\r\n      id: id,\r\n    });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: carState.items,\r\n    totalAmount: carState.totalAmount,\r\n    addItem: addItemCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}